---
  - name: "install nfs packages"
    become: yes
    yum: name={{ item }} state=present
    with_items:
      - nfs-utils
      - qemu-img
    tags:
      - nfsclient

  - name: "create oradata"
    become: yes
    file: path={{ item.path }} state=directory owner={{ item.name }} group=oinstall mode=0755
    with_items:
      - { name: 'grid', path: "{{ ORA_DATA }}" }
    when: storage_type == 'nfs'
    tags:
      - nfsclient

  - name: "create oradata(nfsmulti)"
    become: yes
    file: path="{{ ORA_DATA }}/{{ hostvars[item.1]['NODENAME'] }}" state=directory owner=grid group=oinstall mode=0755
    with_indexed_items: "{{ groups['storage'] }}"
    when: storage_type == 'nfsmulti'
    tags:
      - nfsclient

  - name: "mount oradata"
    become: yes
    mount: name={{ ORA_DATA }} src="{{ STORAGE_SERVER }}:/" fstype=nfs opts="{{ NFS_OPS }}" state=mounted
    when: storage_type == 'nfs'
    tags:
      - nfsclient

  - name: "mount oradata(nfsmulti)"
    become: yes
    mount: name="{{ ORA_DATA }}/{{ hostvars[item.1]['NODENAME'] }}" src="{{ hostvars[item.1]['ansible_eth0']['ipv4']['address'] }}:/" fstype=nfs opts="{{ NFS_OPS }}" state=mounted
    when: storage_type == 'nfsmulti'
    with_indexed_items: "{{ groups['storage'] }}"
    tags:
      - nfsclient

  - name: "chown oradata"
    become: yes
    file: path={{ ORA_DATA }} state=directory owner=grid group=oinstall mode=0775
    tags:
      - nfsclient

  - name: "chown oradata(nfsmulti)"
    become: yes
    file: path="{{ ORA_DATA }}/{{ hostvars[item.1]['NODENAME'] }}" state=directory owner=grid group=oinstall mode=0775
    with_indexed_items: "{{ groups['dbserver'] }}"
    when: storage_type == 'nfsmulti'
    tags:
      - nfsclient

  - name: "create asm device vote(qemu-img)"
    become: yes
    #shell: dd if=/dev/zero of={{ item.name }} bs=1M count={{ item.size }}
    shell: "qemu-img create -f raw -o size={{ item.size }}M {{ item.name }}"
    args:
      creates: "{{ item.name }}"
    when: inventory_hostname == groups["dbserver"][0] and DD_CMD is undefined and storage_type == "nfs"
    with_items:
      - { name: "{{ VOTE_DEV }}", size: "{{ VOTE_BASE_SIZE + VOTE_MULTI_SIZE * groups['dbserver'] | length  }}" }
      - { name: "{{ DATA_DEV }}", size: "{{ DATA_BASE_SIZE + DATA_MULTI_SIZE * groups['dbserver'] | length }}" }
      - { name: "{{ FRA_DEV }}", size: "{{ FRA_BASE_SIZE + FRA_MULTI_SIZE * groups['dbserver'] | length }}" }
    tags:
      - nfsclient

  - name: "create asm device vote(qemu-img) nfsmulti"
    become: yes
    #shell: dd if=/dev/zero of={{ item.name }} bs=1M count={{ item.size }}
    shell: "{% for host in groups['storage']  %}qemu-img create -f raw -o size={{ item.size }}M {{ ORA_DATA }}/{{ hostvars[ host ]['NODENAME'] }}/{{ item.name }};{% endfor %}"
    args:
      creates: "{{ item.name }}"
    when: inventory_hostname == groups["dbserver"][0] and DD_CMD is undefined and storage_type == "nfsmulti"
    with_items:
      - { name: "{{ VOTE_FILE }}", size: "{{ VOTE_BASE_SIZE + VOTE_MULTI_SIZE * groups['dbserver'] | length  }}" }
      - { name: "{{ DATA_FILE }}", size: "{{ DATA_BASE_SIZE + DATA_MULTI_SIZE * groups['dbserver'] | length }}" }
      - { name: "{{ FRA_FILE }}", size: "{{ FRA_BASE_SIZE + FRA_MULTI_SIZE * groups['dbserver'] | length }}" }
    tags:
      - nfsclient

  - name: "create asm device vote(dd)"
    become: yes
    shell: dd if=/dev/zero of={{ item.name }} bs=1M count={{ item.size }}
    when: inventory_hostname == groups["dbserver"][0] and DD_CMD is defined and storage_type == "nfs"
    with_items:
      - { name: "{{ VOTE_DEV }}", size: "{{ VOTE_BASE_SIZE + VOTE_MULTI_SIZE * groups['dbserver'] | length  }}" }
      - { name: "{{ DATA_DEV }}", size: "{{ DATA_BASE_SIZE + DATA_MULTI_SIZE * groups['dbserver'] | length }}" }
      - { name: "{{ FRA_DEV }}", size: "{{ FRA_BASE_SIZE + FRA_MULTI_SIZE * groups['dbserver'] | length }}" }
    tags:
      - nfsclient

  - name: "create asm device vote(dd) nfsmulti"
    become: yes
    shell: "{% for host in groups['storage']  %}dd if=/dev/zero of={{ ORA_DATA }}/{{ hostvars[ host ]['NODENAME'] }}/{{ item.name }} bs=1M count={{ item.size }};{% endfor %}"
    args:
      creates: "{{ item.name }}"
    when: inventory_hostname == groups["dbserver"][0] and DD_CMD is defined and storage_type == "nfsmulti"
    with_items:
      - { name: "{{ VOTE_FILE }}", size: "{{ VOTE_BASE_SIZE + VOTE_MULTI_SIZE * groups['dbserver'] | length  }}" }
      - { name: "{{ DATA_FILE }}", size: "{{ DATA_BASE_SIZE + DATA_MULTI_SIZE * groups['dbserver'] | length }}" }
      - { name: "{{ FRA_FILE }}", size: "{{ FRA_BASE_SIZE + FRA_MULTI_SIZE * groups['dbserver'] | length }}" }
    tags:
      - nfsclient

  - name: "chown oradata"
    become: yes
    file: path={{ item.name }} state=file owner=grid group=asmadmin mode=0660
    when: inventory_hostname == groups["dbserver"][0] and storage_type == "nfs"
    with_items:
      - { name: "{{ VOTE_DEV }}" }
      - { name: "{{ DATA_DEV }}" }
      - { name: "{{ FRA_DEV }}" }
    tags:
      - nfsclient

  - name: "chown oradata nfsmulti"
    become: yes
    file: path="{{ ORA_DATA }}/{{ hostvars[ item.1 ]['NODENAME'] }}/{{ item.0 }}"  state=file owner=grid group=asmadmin mode=0660
    when: inventory_hostname == groups["dbserver"][0] and storage_type == "nfsmulti"
    with_nested:
    - [ "{{ VOTE_FILE }}", "{{ DATA_FILE }}", "{{ FRA_FILE }}" ]
    - "{{ groups['storage'] }}"
    tags:
      - nfsclient

  - name: "enable remote-fs.target"
    become: yes
    service: name=remote-fs.target enabled=yes
    tags:
      - nfsclient
